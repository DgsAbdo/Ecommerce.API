// <auto-generated />
using System;
using Ecommerce.Infra.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Ecommerce.Infra.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230711155645_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Ecommerce.Domain.Entities.CarrinhoCompras", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("ValorTotal")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("CarrinhoCompras", (string)null);
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.ItemCarrinho", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CarrinhoComprasId")
                        .HasColumnType("int");

                    b.Property<int>("ProdutoId")
                        .HasColumnType("int");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CarrinhoComprasId");

                    b.HasIndex("ProdutoId");

                    b.ToTable("ItensCarrinho", (string)null);
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.Produto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("Preco")
                        .HasColumnType("float");

                    b.Property<int?>("PromocaoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PromocaoId");

                    b.ToTable("Produtos", (string)null);
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.Promocao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("PromocaoComValorFixo")
                        .HasColumnType("bit");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int");

                    b.Property<double>("Valor")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Promocao", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nome = "3 por R$10,00",
                            PromocaoComValorFixo = true,
                            Quantidade = 3,
                            Valor = 10.0
                        },
                        new
                        {
                            Id = 2,
                            Nome = "Leve 2 e Pague 1",
                            PromocaoComValorFixo = false,
                            Quantidade = 2,
                            Valor = 1.0
                        });
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.ItemCarrinho", b =>
                {
                    b.HasOne("Ecommerce.Domain.Entities.CarrinhoCompras", "CarrinhoCompras")
                        .WithMany("ItensCarrinho")
                        .HasForeignKey("CarrinhoComprasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecommerce.Domain.Entities.Produto", "Produto")
                        .WithMany("ItensCarrinho")
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarrinhoCompras");

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.Produto", b =>
                {
                    b.HasOne("Ecommerce.Domain.Entities.Promocao", "Promocao")
                        .WithMany("Produtos")
                        .HasForeignKey("PromocaoId");

                    b.Navigation("Promocao");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.CarrinhoCompras", b =>
                {
                    b.Navigation("ItensCarrinho");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.Produto", b =>
                {
                    b.Navigation("ItensCarrinho");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.Promocao", b =>
                {
                    b.Navigation("Produtos");
                });
#pragma warning restore 612, 618
        }
    }
}
